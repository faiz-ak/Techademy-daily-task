
CREATE TABLE employees (
    employee_id     NUMBER PRIMARY KEY,
    first_name      VARCHAR2(50),
    last_name       VARCHAR2(50),
    email           VARCHAR2(100),
    phone_number    VARCHAR2(20),
    hire_date       DATE,
    job_id          VARCHAR2(10),
    salary          NUMBER(8,2),
    department_id   NUMBER
);


INSERT INTO employees VALUES (101, 'Faizan', 'Akram', 'faizan@mail.com', '9999999999', SYSDATE, 'DEV1', 60000, 10);
INSERT INTO employees VALUES (102, 'Ayesha', 'Khan', 'ayesha@mail.com', '8888888888', SYSDATE, 'DEV2', 55000, 10);
INSERT INTO employees VALUES (103, 'Rahul', 'Verma', 'rahul@mail.com', '7777777777', SYSDATE, 'DEV3', 48000, 20);
INSERT INTO employees VALUES (104, 'Sneha', 'Singh', 'sneha@mail.com', '6666666666', SYSDATE, 'DEV4', 50000, 30);
INSERT INTO employees VALUES (105, 'Ali', 'Zaidi', 'ali@mail.com', '5555555555', SYSDATE, 'DEV1', 62000, 10);
COMMIT;

-- Task 1: Cursor to Fetch Employees with Salary > 50000
DECLARE
    CURSOR emp_cursor IS
        SELECT first_name, salary FROM employees WHERE salary > 50000;
    v_name employees.first_name%TYPE;
    v_salary employees.salary%TYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('--- Employees with salary > 50000 ---');
    OPEN emp_cursor;
    LOOP
        FETCH emp_cursor INTO v_name, v_salary;
        EXIT WHEN emp_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Name: ' || v_name || ', Salary: ' || v_salary);
    END LOOP;
    CLOSE emp_cursor;
END;
/

-- Task 2: Procedure to Print Employees in a Given Department
CREATE OR REPLACE PROCEDURE show_employees_in_dept(
    p_dept_id IN employees.department_id%TYPE
) IS
    CURSOR emp_cursor IS
        SELECT first_name FROM employees WHERE department_id = p_dept_id;

    v_name employees.first_name%TYPE;
    v_found BOOLEAN := FALSE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('--- Employees in department ' || p_dept_id || ' ---');
    OPEN emp_cursor;
    LOOP
        FETCH emp_cursor INTO v_name;
        EXIT WHEN emp_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Name: ' || v_name);
        v_found := TRUE;
    END LOOP;
    CLOSE emp_cursor;

    IF NOT v_found THEN
        DBMS_OUTPUT.PUT_LINE('No employees in department ' || p_dept_id);
    END IF;
END;
/

-- Test Task 2
BEGIN
    show_employees_in_dept(10);
END;
/

-- Task 3: Function to Return Annual Salary by Employee ID
CREATE OR REPLACE FUNCTION show_annual_salary(
    p_emp_id IN employees.employee_id%TYPE
) RETURN NUMBER IS
    v_salary employees.salary%TYPE;
BEGIN
    SELECT salary INTO v_salary FROM employees WHERE employee_id = p_emp_id;
    RETURN v_salary * 12;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN -1;
END;
/

-- Test Task 3
DECLARE
    v_annual NUMBER;
BEGIN
    v_annual := show_annual_salary(101);
    DBMS_OUTPUT.PUT_LINE('Annual Salary: ' || v_annual);
END;
/

-- Task 4: BEFORE INSERT Trigger to Ensure Salary >= 30000
CREATE OR REPLACE TRIGGER check_salary_before_insert
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
    IF :NEW.salary < 30000 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Salary must be at least 30000');
    END IF;
END;
/

-- Task 5: Package EMPLOYEE_UTILS with Procedure & Function

-- Package Spec
CREATE OR REPLACE PACKAGE employee_utils IS
    PROCEDURE update_salary(p_emp_id IN NUMBER, p_new_salary IN NUMBER);
    FUNCTION count_employees_in_dept(p_dept_id IN NUMBER) RETURN NUMBER;
END employee_utils;
/

-- Package Body
CREATE OR REPLACE PACKAGE BODY employee_utils IS

    PROCEDURE update_salary(p_emp_id IN NUMBER, p_new_salary IN NUMBER) IS
    BEGIN
        UPDATE employees
        SET salary = p_new_salary
        WHERE employee_id = p_emp_id;
        DBMS_OUTPUT.PUT_LINE('Salary updated for employee ID: ' || p_emp_id);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error updating salary: ' || SQLERRM);
    END;

    FUNCTION count_employees_in_dept(p_dept_id IN NUMBER) RETURN NUMBER IS
        v_count NUMBER;
    BEGIN
        SELECT COUNT(*) INTO v_count FROM employees WHERE department_id = p_dept_id;
        RETURN v_count;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN -1;
    END;

END employee_utils;
/

-- Test Task 5
BEGIN
    employee_utils.update_salary(103, 51000);
    DBMS_OUTPUT.PUT_LINE('Count in Dept 10: ' || employee_utils.count_employees_in_dept(10));
END;
/
